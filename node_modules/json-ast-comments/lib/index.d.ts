import parser = require("./json");
export interface JSONRange {
    start: {
        line: number;
        column: number;
    };
    end: {
        line: number;
        column: number;
    };
}
export interface JsonString {
    type: "string";
    value: string;
    range: JSONRange;
}
export interface JsonNull {
    type: "null";
    value: null;
    range: JSONRange;
}
export interface JsonBoolean {
    type: "boolean";
    value: boolean;
    range: JSONRange;
}
export interface JsonNumber {
    type: "number";
    value: number;
    raw: string;
    range: JSONRange;
}
export interface JsonArray {
    type: "array";
    members: Array<JsonComment | JsonValue>;
    range: JSONRange;
}
export declare type JsonValue = JsonString | JsonNull | JsonBoolean | JsonNumber | JsonObject | JsonArray;
export interface JsonProperty {
    type: "property";
    key: Array<JsonString | JsonComment>;
    value: Array<JsonValue | JsonComment>;
    range: JSONRange;
}
export interface JsonObject {
    type: "object";
    members: Array<JsonProperty | JsonComment>;
    range: JSONRange;
}
export interface JsonComment {
    type: "comment";
    value: string;
    range: JSONRange;
}
export interface JsonDocument {
    type: "document";
    body: Array<JsonObject | JsonComment>;
    range: JSONRange;
}
export declare type JsonAst = JsonValue | JsonComment | JsonDocument;
export interface JsonCommentsObject {
    $$?: Array<string>;
    [propName: string]: any;
}
export { parser };
export declare function parse(text: string): any;
export declare function stringify(json: any): any;
