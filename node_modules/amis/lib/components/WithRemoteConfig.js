"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withRemoteConfig = exports.Store = void 0;
var tslib_1 = require("tslib");
/**
 * 一个可以拉取远程配置的 HOC
 *
 */
var react_1 = tslib_1.__importDefault(require("react"));
var hoist_non_react_statics_1 = tslib_1.__importDefault(require("hoist-non-react-statics"));
var WithStore_1 = require("./WithStore");
var env_1 = require("../env");
var mobx_state_tree_1 = require("mobx-state-tree");
var api_1 = require("../utils/api");
var tpl_builtin_1 = require("../utils/tpl-builtin");
var mobx_1 = require("mobx");
exports.Store = mobx_state_tree_1.types
    .model('OptionsStore')
    .props({
    fetching: false,
    errorMsg: '',
    config: mobx_state_tree_1.types.frozen(),
    data: mobx_state_tree_1.types.frozen({})
})
    .actions(function (self) {
    var load = mobx_state_tree_1.flow(function (env, api, data, config) {
        var ret, data_1, options, e_1;
        if (config === void 0) { config = {}; }
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, 3, 4]);
                    self.fetching = true;
                    return [4 /*yield*/, env.fetcher(api, data)];
                case 1:
                    ret = _a.sent();
                    if (ret.ok) {
                        data_1 = ret.data || {};
                        options = config.adaptor ? config.adaptor(data_1) : data_1;
                        self.setConfig(options, config);
                    }
                    else {
                        throw new Error(ret.msg || 'fetch error');
                    }
                    return [3 /*break*/, 4];
                case 2:
                    e_1 = _a.sent();
                    self.errorMsg = e_1.message;
                    return [3 /*break*/, 4];
                case 3:
                    self.fetching = false;
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/];
            }
        });
    });
    return {
        load: load,
        setData: function (data) {
            self.data = data || {};
        },
        setConfig: function (options, config) {
            if (config.normalizeConfig) {
                options = config.normalizeConfig(options, self.config) || options;
            }
            self.config = options;
        }
    };
});
function withRemoteConfig(config) {
    if (config === void 0) { config = {}; }
    return function (ComposedComponent) {
        var _a;
        var result = hoist_non_react_statics_1.default(WithStore_1.withStore(function () { return exports.Store.create(); })((_a = /** @class */ (function (_super) {
                tslib_1.__extends(class_1, _super);
                function class_1() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.toDispose = [];
                    return _this;
                }
                class_1.prototype.componentDidMount = function () {
                    var _this = this;
                    var env = this.props.env || this.context;
                    var _a = this.props, store = _a.store, source = _a.source, data = _a.data;
                    store.setData(data);
                    if (tpl_builtin_1.isPureVariable(source)) {
                        this.syncOptions();
                        this.toDispose.push(mobx_1.reaction(function () {
                            return tpl_builtin_1.resolveVariableAndFilter(source, store.data, '| raw');
                        }, function () { return _this.syncOptions(); }));
                    }
                    else if (env && api_1.isEffectiveApi(source, data)) {
                        this.loadOptions();
                        this.toDispose.push(mobx_1.reaction(function () {
                            var api = api_1.normalizeApi(source);
                            return api.trackExpression
                                ? tpl_builtin_1.tokenize(api.trackExpression, store.data)
                                : api_1.buildApi(api, store.data, {
                                    ignoreData: true
                                }).url;
                        }, function () { return _this.loadOptions(); }));
                    }
                };
                class_1.prototype.componentDidUpdate = function (prevProps) {
                    var props = this.props;
                    if (props.data !== prevProps.data) {
                        props.store.setData(props.data);
                    }
                };
                class_1.prototype.componentWillUnmount = function () {
                    this.toDispose.forEach(function (fn) { return fn(); });
                    this.toDispose = [];
                };
                class_1.prototype.loadOptions = function () {
                    var env = this.props.env || this.context;
                    var _a = this.props, store = _a.store, source = _a.source, data = _a.data;
                    if (env && api_1.isEffectiveApi(source, data)) {
                        store.load(env, source, data, config);
                    }
                };
                class_1.prototype.syncOptions = function () {
                    var _a = this.props, store = _a.store, source = _a.source, data = _a.data;
                    if (tpl_builtin_1.isPureVariable(source)) {
                        store.setConfig(tpl_builtin_1.resolveVariableAndFilter(source, data, '| raw') || [], config);
                    }
                };
                class_1.prototype.render = function () {
                    var store = this.props.store;
                    var injectedProps = {
                        config: store.config,
                        loading: store.fetching
                    };
                    return (react_1.default.createElement(ComposedComponent, tslib_1.__assign({}, this.props, injectedProps)));
                };
                return class_1;
            }(react_1.default.Component)),
            _a.displayName = "WithRemoteConfig(" + (ComposedComponent.displayName || ComposedComponent.name) + ")",
            _a.ComposedComponent = ComposedComponent,
            _a.contextType = env_1.EnvContext,
            _a)), ComposedComponent);
        return result;
    };
}
exports.withRemoteConfig = withRemoteConfig;
//# sourceMappingURL=./components/WithRemoteConfig.js.map
