import { EditorProps } from "../components/app/types";
export declare const rootStore: {
    isMobile: boolean;
    isPreview: boolean;
    lastSavedSchema: import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<{}, {}, {}>>;
    editorInstance: any;
    option: EditorProps & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IType<EditorProps, EditorProps, EditorProps>>;
} & import("mobx-state-tree/dist/internal").NonEmptyObject & {
    readonly isDirty: boolean;
} & {
    setOption: (option: EditorProps) => void;
    toggleViewMode: (toggle?: any) => void;
    togglePreview: (toggle?: any) => void;
    setLastSavedSchema: (schema: any) => void;
    setEditorInstance: (instance: any) => void;
} & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
    isMobile: import("mobx-state-tree").ISimpleType<boolean>;
    isPreview: import("mobx-state-tree").ISimpleType<boolean>;
    lastSavedSchema: import("mobx-state-tree").IType<{}, {}, {}>;
    editorInstance: import("mobx-state-tree").IType<any, any, any>;
    option: import("mobx-state-tree").IType<EditorProps, EditorProps, EditorProps>;
}, {
    readonly isDirty: boolean;
} & {
    setOption: (option: EditorProps) => void;
    toggleViewMode: (toggle?: any) => void;
    togglePreview: (toggle?: any) => void;
    setLastSavedSchema: (schema: any) => void;
    setEditorInstance: (instance: any) => void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
