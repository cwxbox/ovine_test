import { RenderOptions } from 'amis/lib/factory';
import { History } from 'history';
import { DefaultTheme } from 'styled-components';
import { LoggerConfig } from "../utils/logger";
import { Request } from "../utils/request";
import { ReqOption } from "../utils/request/types";
import { ClassMethod, DeepPartial, Map, ObjectOf } from "../utils/types";
import { AppTheme } from "./theme";
declare type Env = {
    mode: string;
    domains: Map<string, string>;
    disableLimit?: boolean;
    isRelease?: boolean;
    isProd?: boolean;
    logger?: LoggerConfig;
};
export declare type EnvConfig = {
    [env: string]: DeepPartial<Env>;
};
export declare type AppAmis = Partial<RenderOptions & {
    constants: ObjectOf<string | number>;
    locale: 'zh-CN' | 'en-US';
    definitions: any;
}>;
declare type AppConstants = {
    routePrefix: string | (() => string);
    rootLimitFlag: string;
    notFound: {
        route: string;
        pagePath: string;
    };
    toastDuration?: number;
    loginRoute?: string;
    enableBackTop?: boolean;
};
export interface AppConfig {
    request: any;
    theme: any;
    env: EnvConfig;
    amis: AppAmis;
    styled: {
        globalStyle: string | ((theme: DefaultTheme) => any);
    };
    constants: AppConstants;
    entry: any[];
    hook: {
        beforeCreate?: (app: AppDefInstance, config: AppConfig) => Promise<void>;
        afterCreated?: (app: AppDefInstance, config: AppConfig) => Promise<void>;
        onAppMounted?: () => void;
    };
    asyncPage: {
        schema: any;
        preset: any;
        mock: any;
    };
}
export interface AppDefInstance extends Omit<AppConfig, 'env' | 'constants'> {
    create: (config: AppConfig) => Promise<void>;
    entry: any[];
    theme: AppTheme;
    env: Env & {
        isMock: boolean;
    };
    constants: Omit<AppConstants, 'routePrefix'> & {
        routePrefix: string;
    };
    request: ClassMethod<Request, 'request'> & {
        getUrlByOption: (option: ReqOption) => {
            url: string;
            method: string;
        };
    };
}
export declare type AppMountedProps = {
    routerHistory: History<any>;
};
export {};
