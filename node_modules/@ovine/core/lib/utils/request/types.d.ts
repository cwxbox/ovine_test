export declare type ReqMethod = 'GET' | 'PUT' | 'DELETE' | 'POST' | 'PATCH' | 'HEAD' | 'OPTIONS';
export declare type ReqSuccessHook<S = any, P = any> = (source: S, option: ReqOption<S, P>, response: ReqResponse<S>) => S | Promise<S>;
export declare type ReqResponse<S = any> = Partial<Response> & {
    data: ReqApiRes<S>;
    responseText?: string;
};
export declare type ReqErrorHook<S = any, P = any> = (response: ReqApiRes<S>, option: ReqOption<S, P>, error: Error) => void | boolean;
export declare type ReqMockSource<S = any, P = any> = {
    [key: string]: ReqMockSourceGen<S, P>;
};
export declare type ReqOption<S = any, P = any> = {
    api?: string;
    url?: string;
    method?: ReqMethod;
    domain?: string;
    data?: Partial<P>;
    headers?: any;
    body?: any;
    dataType?: 'json' | 'form-data' | 'form';
    responseType?: 'blob';
    expired?: number;
    cache?: number;
    fetchOptions?: Omit<RequestInit, 'header' | 'body' | 'signal' | 'url' | 'method'>;
    qsOptions?: any;
    mock?: boolean;
    mockSource?: ReqMockSourceGen;
    mockDelay?: number;
    actionAddr?: string;
    actionDesc?: string;
    isEnvFetcher?: boolean;
    onFakeRequest?: (option: ReqOption) => S | Promise<S>;
    onPreRequest?: (option: ReqOption) => ReqOption | Promise<ReqOption>;
    onRequest?: (option: ReqOption) => ReqOption;
    onSuccess?: ReqSuccessHook<S, P>;
    onError?: ReqErrorHook<S, P>;
    [key: string]: any;
};
export declare type ReqMockSourceGen<S = any, P = any> = ((options: ReqOption<S, P>) => object) | ReqApiRes<S>;
export declare type ReqApiRes<T> = {
    code?: number;
    data?: T;
    status?: number;
    msgTimeout?: number;
    msg?: string;
    message?: string;
    error?: any;
    errors?: any;
    [key: string]: any;
};
export declare type ReqConfig = {
    domains: {
        [domain: string]: string;
    };
    isMock?: boolean;
};
