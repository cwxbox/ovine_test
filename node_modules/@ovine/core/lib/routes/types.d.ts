import { LinkItem } from 'amis/lib/components/AsideNav';
import { RouteProps } from 'react-router-dom';
import { AmisProps } from "../components/amis/schema";
import { ReqOption } from "../utils/request/types";
import * as Types from "../utils/types";
export declare type Limit = {
    label: string;
    icon?: string;
    needs?: string[];
    desc?: string;
};
export declare type LimitSchema = {
    limits?: string | string[];
    limitsLogic?: 'and' | 'or';
};
export declare type PagePreset = {
    nodePath?: string;
    limits?: Types.ObjectOf<Limit>;
    apis?: Types.ObjectOf<ReqOption & LimitSchema & {
        key?: string;
        actionAddr?: string;
    }>;
};
export declare type RouteItem = Omit<LinkItem, 'children' | 'component'> & Pick<RouteProps, 'component' | 'exact' | 'sensitive' | 'strict'> & PagePreset & {
    nodePath: string;
    nodeLabel?: string;
    limitLabel?: string;
    badge?: number;
    badgeClassName?: string;
    pathToComponent?: boolean | string | ReqOption;
    children?: RouteItem[];
    highlightParent?: boolean;
    sideVisible?: boolean;
    ignoreLimit?: boolean;
    limitOnly?: boolean;
    routeTabShared?: boolean;
    href?: string | string[];
};
export declare type LimitMenuItem = RouteItem & Limit & {
    disabled?: boolean;
};
export declare type PageFileOption = Partial<Pick<RouteItem, 'path' | 'pathToComponent' | 'nodePath'>>;
export declare type PresetRouteProps = Omit<RouteProps, 'path'> & PageFileOption & {
    debounceRoute?: number;
    withSuspense?: boolean;
    fallback?: any;
};
export declare type PageProps = Omit<RouteItem, keyof PagePreset> & PresetRouteProps;
export declare type PresetComponentProps = PresetRouteProps & {
    LazyFileComponent?: any;
    RouteComponent?: any;
    lazyFileAmisProps?: AmisProps;
};
export declare type CheckLimitFunc = (limitKeys?: string | string[], option?: {
    nodePath?: string;
    limits?: any;
}) => boolean;
export declare type PresetCtxState = PagePreset & {
    route: RouteProps;
};
export declare type PrivateRouteProps = RouteProps & {
    onAuth: (() => boolean) | Promise<Boolean>;
    onRedirect: () => string;
    redirect?: string;
};
