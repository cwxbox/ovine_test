var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/* eslint-disable max-classes-per-file */
import { Renderer } from 'amis';
import React from 'react';
import 'amis/lib/locale/en-US';
import "./lib_crud";
import "./lib_css";
import "./lib_when";
import "./lib_dropdown";
import "./lib_renderer";
import "./lib_limit_setting";
// TODO: 添加 table-cell 文字折叠展示
// 直接渲染 schema.body, 用于 渲染器 key 值冲突时
let LibBlank = class LibBlank extends React.Component {
    render() {
        const { render, body } = this.props;
        return render('body', body, {});
    }
};
LibBlank = __decorate([
    Renderer({
        test: /(^|\/)lib-blank$/,
        name: 'lib-blank',
    })
], LibBlank);
export { LibBlank };
// 动态处理schema时，过滤某个节点组件
let LibOmit = class LibOmit extends React.PureComponent {
    render() {
        return null;
    }
};
LibOmit = __decorate([
    Renderer({
        test: /(^|\/)lib-omit$/,
        name: 'lib-omit',
    })
], LibOmit);
export { LibOmit };
