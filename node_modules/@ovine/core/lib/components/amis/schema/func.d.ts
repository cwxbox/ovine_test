import { RendererConfig } from 'amis/lib/factory';
import { Schema } from 'amis/lib/types';
import { ObjectOf } from "../../../utils/types";
import { LibSchema, SchemaPreset } from "./types";
export declare const filterSchemaLimit: (schema: LibSchema, option?: {
    nodePath?: string | undefined;
    isDefinitions?: boolean | undefined;
} | undefined) => void;
export declare const convertToAmisSchema: (schema: LibSchema, option: {
    preset?: SchemaPreset;
    definitions?: any;
    constants?: ObjectOf<string>;
}) => LibSchema;
export declare const resolveLibSchema: (schema: LibSchema) => {
    type: string;
    detectField?: string | undefined;
    visibleOn?: string | undefined;
    hiddenOn?: string | undefined;
    children?: JSX.Element | ((props: any, schema?: any) => JSX.Element) | null | undefined;
    limits?: string | string[] | undefined;
    limitsLogic?: "and" | "or" | undefined;
    definitions: import("amis/lib/types").Definitions | undefined;
    preset: SchemaPreset;
};
export declare const libResolver: (path: string, schema?: Schema | undefined) => null | RendererConfig;
export declare const wrapCss: (schema: LibSchema) => LibSchema;
