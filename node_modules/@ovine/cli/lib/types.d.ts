import { Loader } from 'webpack';
declare type TemplateConfig = {
    path?: string;
    head?: string;
    preBody?: string;
    postBody?: string;
};
declare type DevServerConfig = {
    publicPath: string;
    openPage: string;
    proxy: any;
    [key: string]: any;
};
export declare type SiteConfig = {
    favicon: string;
    title: string;
    publicPath: string;
    devServer: Partial<DevServerConfig>;
    dll: {
        hostDir?: string;
        publicPath?: string;
        useJsdelivr?: boolean;
    };
    ui: {
        defaultTheme?: string;
        withIconfont?: boolean;
        withoutPace?: boolean;
        appTheme?: string;
    };
    envModes?: string[];
    staticFileExts?: string[];
    template?: TemplateConfig;
    styledConfig?: any;
    cacheGroups?: {
        [key: string]: object;
    };
    splitRoutes?: Array<{
        test: RegExp;
        name: string;
    }>;
};
export declare type SiteContext = {
    siteConfig?: SiteConfig;
};
export declare type CliOptions = {
    env: string;
    mock: boolean;
};
export declare type DevCliOptions = CliOptions & {
    port: string;
    host: string;
    hot: boolean;
    localIp: boolean;
    open: boolean;
    dll: boolean;
    scssUpdate: boolean;
};
export declare type BuildCliOptions = CliOptions & {
    bundleAnalyzer: boolean;
};
export declare type DllCliOptions = {
    embedAssets: boolean;
    withHash: boolean;
    bundleAnalyzer: boolean;
};
export interface LoadContext {
    siteDir: string;
    genDir: string;
    siteConfig: SiteConfig;
    outDir: string;
    srcDir: string;
    publicPath: string;
}
export declare type Props = LoadContext;
export interface ConfigureWebpackUtils {
    getStyleLoaders: (isServer: boolean, cssOptions: {
        [key: string]: any;
    }) => Loader[];
    getCacheLoader: (isServer: boolean, cacheOptions?: {}) => Loader | null;
    getBabelLoader: (isServer: boolean, babelOptions?: {}) => Loader;
}
export declare type PkgName = 'cli' | 'init' | 'editor' | 'core' | 'craft';
export {};
