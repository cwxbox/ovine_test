"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.info = void 0;
var chalk_1 = __importDefault(require("chalk"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var semver_1 = __importDefault(require("semver"));
var constants_1 = require("../constants");
var utils_1 = require("../utils");
var types = ['version'];
function info(type, options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (type) {
                case types[0]:
                    printVersionInfo(options);
                    break;
                default:
                    console.log("Please input info type. Optional Type: " + types.join(','));
            }
            return [2 /*return*/];
        });
    });
}
exports.info = info;
function printVersionInfo(options) {
    var siteDir = options.siteDir;
    var verInfo = {};
    var modulesDir = siteDir + "/node_modules/";
    console.log("\n" + chalk_1["default"].grey('loading version info...'));
    var latestVer = utils_1.getPkgLatestVer();
    var amisVer = require('amis/package.json').version;
    var remarks = {
        core: "amis: " + amisVer,
        editor: "amis-editor: " + constants_1.amisEditorVer
    };
    var requiredSameAsCliVerPkgs = ['core'];
    fs_extra_1["default"].readdir("" + modulesDir + utils_1.getPkgName()).then(function (dirs) {
        dirs.forEach(function (pkg) {
            var pkgName = utils_1.getPkgName(pkg);
            var pkgPath = "" + modulesDir + pkgName + "/package.json";
            var version = require(pkgPath).version;
            var remark = semver_1["default"].eq(constants_1.libVer, version)
                ? remarks[pkg] || '--'
                : requiredSameAsCliVerPkgs.includes(pkg)
                    ? "\"" + pkg + "\" ver should same as \"cli\"."
                    : '--';
            verInfo[pkgName] = {
                version: version,
                remark: remark
            };
        });
        verInfo[utils_1.getPkgName('cli')] = {
            version: constants_1.libVer,
            remark: "required dll: " + constants_1.dllVer
        };
        console.log("\n" + chalk_1["default"].cyan('Ovine verion info:') + "\n");
        console.table(verInfo);
        if (semver_1["default"].eq(constants_1.libVer, latestVer)) {
            console.log("\n" + chalk_1["default"].green('Ovine already up-to-date.') + "\n");
        }
        else {
            console.log("\nOvine latest version: " + chalk_1["default"].green(latestVer) + "\n");
        }
        if (semver_1["default"].lt(constants_1.libVer, latestVer) && semver_1["default"].eq(semver_1["default"].coerce(latestVer) || '0.0.1', latestVer)) {
            console.log(chalk_1["default"].yellowBright('The installed Ovine is outdate.') + " Please install the latest version.\n");
        }
        console.log("Ovine changelog doc: " + chalk_1["default"].blueBright(constants_1.domain.libDoc + "org/blog/changelog/") + "\n");
    });
}
