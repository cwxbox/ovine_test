"use strict";
/**
 * webpack dll config
 * do not use "publicPath".
 * TODO: add manifest.json to dll/dir/xx for dllPublic path.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.createDllConfig = void 0;
var assets_webpack_plugin_1 = __importDefault(require("assets-webpack-plugin"));
var clean_webpack_plugin_1 = __importDefault(require("clean-webpack-plugin"));
var lodash_1 = __importDefault(require("lodash"));
var mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
var terser_webpack_plugin_1 = __importDefault(require("terser-webpack-plugin"));
var webpack_1 = require("webpack");
var webpack_bundle_analyzer_1 = require("webpack-bundle-analyzer");
var constants = __importStar(require("../constants"));
var utils_1 = require("../utils");
var amis = __importStar(require("./amis"));
var babel_1 = require("./babel");
var dll_post_plugin_1 = __importDefault(require("./plugins/dll_post_plugin"));
var log_plugin_1 = __importDefault(require("./plugins/log_plugin"));
var moment_plugin_1 = __importDefault(require("./plugins/moment_plugin"));
var monaco_editor_plugin_1 = __importDefault(require("./plugins/monaco_editor_plugin"));
// eslint-disable-next-line import/order
var chalk = require("chalk");
var webpackDllConfFileName = constants.webpackDllConfFileName, dllDirPath = constants.dllDirPath, dllVendorFileName = constants.dllVendorFileName, dllManifestFile = constants.dllManifestFile, dllAssetsFile = constants.dllAssetsFile, libName = constants.libName, dllChunkFilePrefix = constants.dllChunkFilePrefix;
var dllModules = [
    'react-router-dom',
    'whatwg-fetch',
    'qs',
    'immer',
    'lodash',
    'styled-components',
    'amis',
    'bootstrap/dist/js/bootstrap.bundle.js',
    'bootstrap/dist/css/bootstrap.css',
    'animate.css/animate.css',
    'font-awesome/css/font-awesome.css',
    'react-datetime/css/react-datetime.css',
    'video-react/dist/video-react.css',
    'cropperjs/dist/cropper.css',
    'tinymce/skins/ui/oxide/skin.css',
    'froala-editor/css/froala_style.min.css',
    'froala-editor/css/froala_editor.pkgd.min.css',
];
function setDllVendorModules(config) {
    var venderConfKey = "entry." + dllVendorFileName;
    var vendorModules = lodash_1["default"].get(config, venderConfKey);
    if (typeof vendorModules === 'undefined') {
        lodash_1["default"].set(config, venderConfKey, dllModules);
        return;
    }
    if (lodash_1["default"].isArray(vendorModules)) {
        lodash_1["default"].set(config, venderConfKey, lodash_1["default"].uniq(dllModules.concat(vendorModules)));
    }
    else {
        console.error(chalk.red('\nDll webpack config must set entry.dll_vendor must function or array of module name...'));
        return;
    }
    if (lodash_1["default"].isFunction(vendorModules)) {
        var vendorDllModules = vendorModules(dllModules);
        if (lodash_1["default"].isArray(vendorDllModules)) {
            lodash_1["default"].set(config, venderConfKey, vendorDllModules);
        }
        else {
            console.error(chalk.red('\nDll webpack config entry.dll_vendor function must return array of module name...'));
        }
    }
}
function addEditorFilesToDll(options) {
    var siteDir = options.siteDir;
    var getEditorFile = function (filePath) {
        return utils_1.getModulePath(siteDir, "lib/editor/lib/assets/" + filePath) || '';
    };
    // TODO: do not build dll with editor.view.js ----> use lazy load for it.
    var editorPath = getEditorFile('scripts/editor.view.js');
    if (editorPath) {
        dllModules.push(editorPath);
        dllModules.push(getEditorFile('styles/editor.view.css'));
    }
}
/**
 *  deprecated
 */
// export function monacoWorkerConfig(options: ConfigOptions): any {
//   const { siteDir } = options
//   const monacoVar = require('monaco-editor/package.json').version
//   const venderPath = `${siteDir}/${dllDirPath}`
//   const entries = {
//     'editor.worker': 'monaco-editor/esm/vs/editor/editor.worker.js',
//     'json.worker': 'monaco-editor/esm/vs/language/json/json.worker',
//     'css.worker': 'monaco-editor/esm/vs/language/css/css.worker',
//     'html.worker': 'monaco-editor/esm/vs/language/html/html.worker',
//     'ts.worker': 'monaco-editor/esm/vs/language/typescript/ts.worker',
//   }
//   const entry = _.omitBy(entries, (__, key) => {
//     return fse.existsSync(`${venderPath}/${key}.${monacoVar}.js`)
//   })
//   // avoid same version repeat pack
//   if (_.isEmpty(entry)) {
//     return false
//   }
//   // monaco-editor doc: https://github.com/Microsoft/monaco-editor/blob/HEAD/docs/integrate-esm.md
//   const config = {
//     entry,
//     mode: 'production',
//     output: {
//       pathinfo: false,
//       path: venderPath,
//       filename: `[name].${monacoVar}.js`,
//       libraryTarget: 'window',
//       // publicPath: `${publicPath}${dllVendorDirPath}/`,
//     },
//     performance: {
//       hints: false, // not necessary
//     },
//     plugins: [
//       new CleanPlugin({
//         cleanOnceBeforeBuildPatterns: _.keys(entry).map((i) => `${i}.*`),
//       }),
//     ],
//   }
//   return config
// }
var editorFileReg = amis.editorFileReg, factoryFileReg = amis.factoryFileReg, froalaEditorReg = amis.froalaEditorReg, chartFileReg = amis.chartFileReg, apiUtilReg = amis.apiUtilReg;
function createDllConfig(options) {
    var siteDir = options.siteDir, siteConfig = options.siteConfig, withHash = options.withHash, bundleAnalyzer = options.bundleAnalyzer, embedAssets = options.embedAssets;
    var getHashStr = function (hashTpl) { return (!withHash ? '' : "_" + hashTpl); };
    var dllName = "[name]" + getHashStr('[hash:6]');
    var babelLoader = {
        loader: 'babel-loader',
        options: babel_1.getDllBabelConfig(siteDir)
    };
    var dllConfig = {
        mode: 'production',
        module: {
            rules: [
                {
                    test: /\.[t|j]sx?$/,
                    exclude: [editorFileReg, factoryFileReg, froalaEditorReg, chartFileReg, apiUtilReg],
                    use: [babelLoader]
                },
                {
                    test: editorFileReg,
                    use: [babelLoader, amis.fixEditorLoader()]
                },
                {
                    test: factoryFileReg,
                    use: [babelLoader, amis.fixFactoryLoader()]
                },
                {
                    test: froalaEditorReg,
                    use: [babelLoader, amis.fixFroalaLoader()]
                },
                {
                    test: chartFileReg,
                    use: [babelLoader, amis.fixChartLoader()]
                },
                {
                    test: apiUtilReg,
                    use: [babelLoader, amis.fixApiUtilLoader()]
                },
                {
                    test: /\.css$/,
                    exclude: !withHash ? [amis.bootStropCss, amis.fontAwesomeCss] : [amis.bootStropCss],
                    use: [mini_css_extract_plugin_1["default"].loader, 'css-loader']
                },
                {
                    test: amis.bootStropCss,
                    use: [mini_css_extract_plugin_1["default"].loader, 'css-loader', amis.fixBootStropCss()]
                },
                !withHash && {
                    test: amis.fontAwesomeCss,
                    use: [
                        mini_css_extract_plugin_1["default"].loader,
                        'css-loader',
                        amis.fixFontAwesomeCss({ siteDir: siteDir, embedAssets: embedAssets }),
                    ]
                },
                {
                    test: new RegExp("\\." + ("(png,jpg,gif,ttf,woff,woff2,eot,svg" + (!siteConfig.staticFileExts ? '' : "," + siteConfig.staticFileExts)).replace(/,/gi, '|') + ")$"),
                    exclude: [/[\\/]qs\//, /[\\/]icons[\\/]/, amis.fontAwesomeCss],
                    use: [
                        {
                            loader: 'url-loader',
                            options: {
                                publicPath: './',
                                limit: embedAssets ? 500 * 1000 : 2000,
                                name: "dll_[name]" + getHashStr('[contenthash:6]') + ".[ext]"
                            }
                        },
                    ]
                },
            ].filter(Boolean)
        },
        resolve: {
            alias: {
                'react-dom': '@hot-loader/react-dom'
            }
        },
        output: {
            pathinfo: false,
            path: siteDir + "/" + dllDirPath,
            filename: dllName + ".js",
            chunkFilename: dllChunkFilePrefix + "[name]" + getHashStr('[chunkhash:6]') + ".js",
            library: dllName,
            libraryTarget: 'window'
        },
        plugins: [
            new log_plugin_1["default"]({
                name: libName + "-Dll"
            }),
            new clean_webpack_plugin_1["default"](),
            new monaco_editor_plugin_1["default"]({
                filename: "monaco_worker_[name]" + getHashStr('[contenthash:6]') + ".js"
            }),
            new moment_plugin_1["default"]({
                localesToKeep: ['zh-cn']
            }),
            new mini_css_extract_plugin_1["default"]({
                filename: dllName + ".css",
                chunkFilename: dllChunkFilePrefix + "[name]" + getHashStr('[chunkhash:6]') + ".css"
            }),
            new webpack_1.DllPlugin({
                path: siteDir + "/" + dllManifestFile,
                name: dllName
            }),
            new assets_webpack_plugin_1["default"]({
                filename: dllAssetsFile.replace('[name]', dllVendorFileName),
                fullPath: false,
                path: siteDir
            }),
            new dll_post_plugin_1["default"]({
                siteDir: siteDir,
                withHash: withHash
            }),
        ],
        performance: {
            hints: false
        },
        optimization: {
            minimizer: [new terser_webpack_plugin_1["default"]()],
            splitChunks: {
                maxInitialRequests: Infinity,
                automaticNameDelimiter: '_',
                cacheGroups: {
                    "default": false,
                    vendors: false,
                    /**
                     * split one big dll bundle file into some small file.
                     */
                    boot: {
                        chunks: 'initial',
                        //  pick some core pkgs to be subcontracted
                        test: /[\\/]node_modules[\\/](react|react-router-dom|whatwg-fetch|styled-components|lodash|moment|immer|qs|@hot-loader|mobx|mobx-react|mobx-state-tree|jquery)[\\/]/,
                        name: 'boot',
                        priority: 30
                    },
                    amis: {
                        chunks: 'initial',
                        test: /[\\/]node_modules[\\/]amis[\\/]/,
                        name: 'amis',
                        priority: 20
                    },
                    monacoLanguages: {
                        chunks: 'async',
                        name: 'monaco_languages',
                        test: /monaco-editor[\\/].*language/,
                        priority: 10,
                        minChunks: 1
                    }
                }
            }
        }
    };
    if (bundleAnalyzer) {
        dllConfig.plugins.push(
        // https://github.com/webpack-contrib/webpack-bundle-analyzer
        new webpack_bundle_analyzer_1.BundleAnalyzerPlugin());
    }
    addEditorFilesToDll(options);
    var config = utils_1.mergeWebpackConfig(dllConfig, siteDir + "/" + webpackDllConfFileName);
    setDllVendorModules(config);
    return config;
}
exports.createDllConfig = createDllConfig;
